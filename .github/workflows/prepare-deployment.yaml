name: Conditional Daily Deployment Preparation (Weekdays Only)

on:
  schedule:
    # Runs at 9:00 AM GMT, Monday through Friday
    - cron: '0 9 * * 1-5'
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  check-for-changes:
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check_changes.outputs.has_changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Updated for Node.js 20 support

      - name: Fetch all tags
        run: git fetch --depth=1 origin +refs/tags/*:refs/tags/* 

      - name: Install GitHub CLI
        run: |
          if ! gh --version &>/dev/null; then
            sudo apt update
            sudo apt install -y gh
          fi

      - name: Fetch the latest release
        id: latest_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASES=$(gh api repos/${{ github.repository }}/releases --paginate)
          LATEST_RELEASE=$(echo "$RELEASES" | jq -r '.[] | select(.draft == false and .prerelease == false) | .tag_name' | head -n 1)

          if [ -n "$LATEST_RELEASE" ]; then
            echo "LATEST_RELEASE=$LATEST_RELEASE" >> $GITHUB_ENV
          fi

      - name: Check for changes
        id: check_changes
        run: |
          if [ -n "$LATEST_RELEASE" ]; then
            CHANGES=$(git diff --name-only "$LATEST_RELEASE"..main)
            echo "$CHANGES"
            if [ -n "$CHANGES" ]; then
              echo changes found - changes true
              echo "has_changes=true" >> "$GITHUB_OUTPUT"
            else
            echo no changes - changes false
              echo "has_changes=false" >> "$GITHUB_OUTPUT"
            fi
          else
            echo no latest release - changes false
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          fi

  test-outputs:
    runs-on: ubuntu-latest
    needs: check-for-changes
    steps:
      - env: 
          HAS_CHANGES: ${{needs.check-for-changes.outputs.has_changes}}
        run: echo HAS_CHANGES:" $HAS_CHANGES"

  create-tag-name:
    runs-on: ubuntu-latest
    needs: check-for-changes
    if: ${{needs.check-for-changes.outputs.has_changes == 'true'}} 
    outputs:
      release-name: ${{ steps.create-release-name.outputs.release_name }}
      test: ${{ steps.create-release-name.outputs.test }}
    steps:
      - name: Create new release name
        id: create-release-name
        run: |
          DATE=$(date +'%y-%m-%d')
          TAG_NAME="v$DATE"
          echo "release_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "test=teste" >> $GITHUB_OUTPUT
          echo $TAG_NAME

  step1:
    runs-on: ubuntu-latest
    needs: create-tag-name
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - env: 
          RELEASE_NAME: ${{needs.create-release-name.outputs.release_name}}
          TEST: ${{needs.create-release-name.outputs.test}}
        run: |
          echo RELEASE_NAME:" $RELEASE_NAME"
          echo "$TEST"

      - name: Generate step1.md
        run: |
          echo RELEASE_NAME:" $RELEASE_NAME"
          echo "step1" > "$RELEASE_NAME"/step1.md
      
      - name: Upload step1.md as artifact
        uses: actions/upload-artifact@v4
        with:
          name: step1.md
          path: "$RELEASE_NAME"

  step2:
    needs: create-tag-name
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - env: 
          RELEASE_NAME: ${{needs.create-release-name.outputs.release_name}}
        run: echo RELEASE_NAME:" $RELEASE_NAME"

      - name: Generate step2.md
        run: |
          echo RELEASE_NAME:" $RELEASE_NAME"
          echo "step2" > "$RELEASE_NAME"/step2.md
      
      - name: Upload step2.md as artifact
        uses: actions/upload-artifact@v4
        with:
          name: step2.md
          path: "$RELEASE_NAME"

  create-draft-release:
    needs: [step1, step2, create-tag-name]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - env: 
          RELEASE_NAME: ${{needs.create-release-name.outputs.release_name}}
        run: echo RELEASE_NAME:" $RELEASE_NAME"

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: "$RELEASE_NAME"
      
      - name: Create Draft Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "$RELEASE_NAME" --draft --title "$TAG_NAME" --notes "This is an auto-generated draft release." step1.md step2.md