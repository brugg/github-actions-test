name: Prepare deployment

on:
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      new_release_tag: ${{ steps.create-tag-name.outputs.new_release_tag }}
    steps:
      - name: Install GitHub CLI
        run: |
          if ! gh --version &>/dev/null; then
            sudo apt update
            sudo apt install -y gh
          fi

      - name: Create new release name
        id: create-tag-name
        run: |
          DATE=$(date +'%y.%m.%d')
          JOB_NUMBER=${GITHUB_RUN_NUMBER}
          TAG_NAME="v$DATE-$JOB_NUMBER"
          echo "new_release_tag=$TAG_NAME" >> $GITHUB_OUTPUT # To share with other jobs
          echo "new_release_tag=$TAG_NAME" >> $GITHUB_ENV # To share with the next steps in this job
          echo $TAG_NAME

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "$new_release_tag" \
            --repo ${{ github.repository }} \
            --title "$new_release_tag" \
            --notes "This is an auto-generated release."
  
  generate_artifacts:
    runs-on: ubuntu-latest
    needs: create-release
    env: 
      NEW_RELEASE_TAG: ${{ needs.create-release.outputs.new_release_tag }}
    permissions: # Add "id-token" with the intended permissions.
      contents: "read"
      id-token: "write"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.NEW_RELEASE_TAG }}

      # - uses: actions/setup-python@v5
      #   id: setup-python
      #   with:
      #     python-version: "3.9"

      # - name: Install Python dependencies
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install -r requirements.txt
      
      # - name: Cache Python dependencies
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/.cache/pip
      #     key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pip-
  
      # - uses: actions/cache@v4
      #   id: cache-virtualenv
      #   with:
      #     path: ".virtualenv"
      #     key: "python-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('requirements.txt') }}"

      # # If we weren't able to pull down a cache of the virtual environment then
      # # build one.
      # - if: steps.cache-virtualenv.outputs.cache-hit != 'true'
      #   run: make --no-print-directory require-virtualenv

      # # Configure gcloud authentication.  This will activate a service account
      # # that has permissions to read our lint caches.
      # - id: "auth"
      #   name: "Authenticate to Google Cloud"
      #   uses: "google-github-actions/auth@v2"
      #   with:
      #     service_account: "curriculum-github-actions-sa@helloworldcs-dev.iam.gserviceaccount.com"
      #     workload_identity_provider: "projects/252601700190/locations/global/workloadIdentityPools/github/providers/github-id-provider"
  
      # ## Set up authentication
      # - name: Set up Cloud SDK
      #   uses: google-github-actions/setup-gcloud@v2

      - name: Prepare Deploy
        env:
          REPOSITORY_NAME: ${{ github.repository }}
        run: |
          echo Start preparing deplooyment with release name: ${{ env.NEW_RELEASE_TAG }}
        
      - name: Zip Generated Files
        run: |
          zip -r files.zip deploy

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.NEW_RELEASE_TAG }}
          files: files.zip