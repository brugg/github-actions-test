name: Curriculum Deployment

on:
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  # prepare-and-create-release:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     release-tag: ${{ steps.define-tag.outputs.tag }}
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Define the new tag
  #       id: define-tag
  #       run: |
  #         DATE=$(date +'%y.%m.%d')
  #         RUN_NUMBER=${{ github.run_number }}
  #         NEW_TAG="v$DATE-${RUN_NUMBER}"
  #         echo "New tag will be $NEW_TAG"
  #         echo "TAG=$NEW_TAG" >> $GITHUB_ENV
  #         echo "tag=$NEW_TAG" >> "$GITHUB_OUTPUT"

  #     - name: Create GitHub Release with GitHub CLI
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: |
  #         gh release create ${{ env.TAG }} \
  #           --prerelease \
  #           --title "${{ env.TAG }}" \
  #           --notes "Release notes or description" \
  #           --draft=false

  # generate-projects-matrix:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     matrix: ${{ steps.set-matrix.outputs.matrix }}
  #   steps:
  #     - name: Download directories list artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: directories

  #     - name: Read directories and set output
  #       id: set-matrix
  #       run: |
  #         matrix=['courses/data-science-and-ai-a-practice-problems/assets', 'courses/data-science-and-ai-a-practice-problems/projects/1.1_fortune-teller-practice-problem-1/assets', 'courses/data-science-and-ai-a-practice-problems/projects/1.1_fortune-teller-practice-problem-3/assets']
  #         echo "::set-output name=matrix::$(cat directories.txt | jq -R -s -c 'split("\n")[:-1]')"

  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: ['courses/data-science-and-ai-a-practice-problems/assets', 'courses/data-science-and-ai-a-practice-problems/projects/1.1_fortune-teller-practice-problem-1/assets', 'courses/data-science-and-ai-a-practice-problems/projects/1.1_fortune-teller-practice-problem-3/assets']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Print current directory
        run: |
          echo "Processing in directory ${{ matrix.directory }}"
          pwd
      
      - name: List all folders
        run: find . -type d ! -path '*/\.*' -print
      
      - name: Configure sparse-checkout
        run: |
          git config core.sparseCheckout true
          echo "${{ matrix.directory }}/" >> .git/info/sparse-checkout
          git read-tree -mu HEAD

      - name: Pull LFS objects for sparse-checked-out paths
        run: |
          git lfs fetch --include="${{ matrix.directory }}/"
          git lfs checkout --include="${{ matrix.directory }}/"
    
      - name: Print current directory
        run: |
          echo "Processing in directory ${{ matrix.directory }}"
          pwd
      
      - name: List all folders
        run: find . -type d ! -path '*/\.*' -print

      - name: List all files in courses
        run: ls -lRh courses

          # find courses -type f ! -path '*/\.*' -print

  # update-release:
  #   runs-on: ubuntu-latest
  #   needs: prepare-and-create-release
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
      
  #     - name: Authenticate with GitHub CLI
  #       run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

  #     - name: Find Latest Pre-Release
  #       id: get-pre-release
  #       run: |
  #         LATEST_PRE_RELEASE=$(gh release list --repo ${{ github.repository }} --json tagName,isPrerelease --jq '.[] | select(.isPrerelease == true) | .tagName' | head -n 1)
  #         # echo "LATEST_PRE_RELEASE=$LATEST_PRE_RELEASE"
  #         echo "tag_name=$LATEST_PRE_RELEASE" >> $GITHUB_ENV
      
  #     - name: Promote Pre-Release to Release
  #       if: env.tag_name
  #       run: gh release edit "${{ env.tag_name }}" --repo ${{ github.repository }} --draft=false --prerelease=false --latest 