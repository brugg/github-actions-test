name: Curriculum Deployment

on:
  workflow_dispatch:  # Allows manual triggering of the workflow
  push:
    branches:
      - main
    paths:
      - 'courses/**'

jobs:
  prepare-and-create-release:
    runs-on: ubuntu-latest
    outputs:
      release-tag: ${{ steps.define-tag.outputs.tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Define the new tag
        id: define-tag
        run: |
          DATE=$(date +'%y.%m.%d')
          RUN_NUMBER=${{ github.run_number }}
          NEW_TAG="v$DATE-${RUN_NUMBER}"
          echo "New tag will be $NEW_TAG"
          echo "TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "tag=$NEW_TAG" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release with GitHub CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ env.TAG }} \
            --prerelease \
            --title "${{ env.TAG }}" \
            --notes "Release notes or description" \
            --draft=false

  update-release:
    runs-on: ubuntu-latest
    needs: prepare-and-create-release
    env: 
      NEW_RELEASE_TAG: ${{ needs.prepare-and-create-release.outputs.release-tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Authenticate with GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Find Latest Pre-Release
        id: get-pre-release
        run: |
          LATEST_PRE_RELEASE=$(gh release list --repo ${{ github.repository }} --json tagName,isPrerelease --jq '.[] | select(.isPrerelease == true) | .tagName' | head -n 1)
          echo "LATEST_PRE_RELEASE=$LATEST_PRE_RELEASE"
          echo "tag_name=$LATEST_PRE_RELEASE" >> $GITHUB_ENV
      
      - name: Promote Pre-Release to Release
        if: env.NEW_RELEASE_TAG
        run: gh release edit "${{ env.NEW_RELEASE_TAG }}" --repo ${{ github.repository }} --draft=false --pre-release=false