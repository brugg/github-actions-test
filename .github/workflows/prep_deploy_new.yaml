name: Prepare deployment New

on:
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      new_release_tag: ${{ steps.create-tag-name.outputs.new_release_tag }}
      latest_release_tag: ${{ steps.latest_release.outputs.latest_release_tag }}
    steps:
      # - name: Checkout repository
      #   uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: |
          if ! gh --version &>/dev/null; then
            sudo apt update
            sudo apt install -y gh
          fi

      - name: Fetch the latest release
        id: latest_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASES=$(gh api repos/${{ github.repository }}/releases --paginate)
          LATEST_RELEASE=$(echo "$RELEASES" | jq -r '.[] | select(.draft == false and .prerelease == false) | .tag_name' | head -n 1)
          
          if [ -n "$LATEST_RELEASE" ]; then
            echo "latest_release_tag=$LATEST_RELEASE" >> $GITHUB_OUTPUT # To share with other jobs
            echo "LATEST_RELEASE=$LATEST_RELEASE" >> $GITHUB_ENV # To share with the next steps in this job
          fi
      
      - name: Create new release name
        id: create-tag-name
        run: |
          DATE=$(date +'%y.%m.%d')
          JOB_NUMBER=${GITHUB_RUN_NUMBER}
          TAG_NAME="v$DATE-$JOB_NUMBER"
          echo "new_release_tag=$TAG_NAME" >> $GITHUB_OUTPUT # To share with other jobs
          echo "new_release_tag=$TAG_NAME" >> $GITHUB_ENV # To share with the next steps in this job
          echo $TAG_NAME

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "$new_release_tag" \
            --repo ${{ github.repository }} \
            --title "$new_release_tag" \
            --notes "This is an auto-generated release."
  
  generate_diffs:
    runs-on: ubuntu-latest
    needs: create-release
    env: 
      NEW_RELEASE_TAG: ${{ needs.create-release.outputs.new_release_tag }}
      LATEST_RELEASE_TAG: ${{ needs.create-release.outputs.latest_release_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.NEW_RELEASE_TAG }}

      - name: Upload artifact for Job 1
        uses: actions/upload-artifact@v4
        with:
          name: file-from-job1
          path: file1.md

      - name: Upload artifact for Job 2
        uses: actions/upload-artifact@v4
        with:
          name: file-from-job2
          path: file2.md
      
      - name: Upload diffs.zip
        uses: actions/upload-artifact@v4
        with:
          name: diffs-zip
          path: diffs.zip
      
      # - name: Fetch all tags
      #   run: git fetch --tags      
      
      # - uses: actions/setup-python@v5
      #   id: setup-python
      #   with:
      #     python-version: "3.9"
      
      # - uses: actions/cache@v4
      #   id: cache-virtualenv
      #   with:
      #     path: ".virtualenv"
      #     key: "python-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('requirements.txt') }}"

      # If we weren't able to pull down a cache of the virtual environment then
      # build one.
      # - if: steps.cache-virtualenv.outputs.cache-hit != 'true'
      #   run: make --no-print-directory require-virtualenv     
      
      # - name: Generate diffs
      #   run: |
      #     echo Start preparing deplooyment with release name: "$NEW_RELEASE_TAG"
      #     python3 tools/prepare-deploy.py -t "$NEW_RELEASE_TAG" -p "$LATEST_RELEASE_TAG" -g "$GITHUB_WORKSPACE"
      
      # - name: Zip Generated Folder
      #   run: |
      #     mv diffs deploys/"$NEW_RELEASE_TAG"/diffs
      #     zip -r files.zip deploys/"$NEW_RELEASE_TAG"/
      
      
      # - name: Upload files
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: diffs-artifact
      #     path: files.zip
          
  # prepare-deployment:
  #   runs-on: ubuntu-latest
  #   env: 
  #     NEW_RELEASE_TAG: ${{ needs.check-for-changes.outputs.new_release_tag }}
  #     LATEST_RELEASE_TAG: ${{ needs.check-for-changes.outputs.latest_release_tag }}
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
      
  #     - uses: actions/setup-python@v5
  #       id: setup-python
  #       with:
  #         python-version: "3.9"
      
  #     - uses: actions/cache@v4
  #       id: cache-virtualenv
  #       with:
  #         path: ".virtualenv"
  #         key: "python-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('requirements.txt') }}"

  #     # If we weren't able to pull down a cache of the virtual environment then
  #     # build one.
  #     - if: steps.cache-virtualenv.outputs.cache-hit != 'true'
  #       run: make --no-print-directory require-virtualenv

  #     - name: Fetch all tags
  #       run: git fetch --tags
      
  #     - name: Generate diffs
  #       run: |
  #         echo Start preparing deplooyment with release name: "$NEW_RELEASE_TAG"
  #         python3 tools/prepare-deploy.py -t "$NEW_RELEASE_TAG" -p "$LATEST_RELEASE_TAG" -g "$GITHUB_WORKSPACE"
      
  #     - name: Zip Generated Folder
  #       run: |
  #         mv diffs deploys/"$NEW_RELEASE_TAG"/diffs
  #         zip -r files.zip deploys/"$NEW_RELEASE_TAG"/
      
  #     - name: Upload files
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: diffs-artifact
  #         path: files.zip

  upload-files:
    runs-on: ubuntu-latest
    needs: [create-release, generate_diffs]
    env: 
      NEW_RELEASE_TAG: ${{ needs.create-release.outputs.new_release_tag }}
    steps:
      - name: Download all Artifacts
        uses: actions/download-artifact@v4
      
      - name: List downloaded files
        run: |
          ls -lah          

      - name: Unzip diff folder
        run: unzip diffs-zip/diffs.zip

      - name: Zip Generated Files
        run: |
          mv diffs deploys/"$NEW_RELEASE_TAG"/diffs
          mv file-from-job1/file1.md deploy/"$NEW_RELEASE_TAG"
          mv file-from-job2/file2.md deploy/"$NEW_RELEASE_TAG"
          zip -r files.zip deploy/"$NEW_RELEASE_TAG"

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2.0.4  
        with:
          files: files.zip
          tag_name: ${{ env.NEW_RELEASE_TAG }}
        env:
          token: ${{ secrets.GITHUB_TOKEN }}